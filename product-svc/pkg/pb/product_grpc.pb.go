// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/pb/product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_CreateCatogory_FullMethodName    = "/product.ProductService/CreateCatogory"
	ProductService_GetAllCategory_FullMethodName    = "/product.ProductService/GetAllCategory"
	ProductService_CreateBrand_FullMethodName       = "/product.ProductService/CreateBrand"
	ProductService_GetAllBrand_FullMethodName       = "/product.ProductService/GetAllBrand"
	ProductService_AddProduct_FullMethodName        = "/product.ProductService/AddProduct"
	ProductService_GetAllProduct_FullMethodName     = "/product.ProductService/GetAllProduct"
	ProductService_CreateCart_FullMethodName        = "/product.ProductService/CreateCart"
	ProductService_GetCart_FullMethodName           = "/product.ProductService/GetCart"
	ProductService_FetchCartForOrder_FullMethodName = "/product.ProductService/FetchCartForOrder"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateCatogory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCatogoryResponse, error)
	GetAllCategory(ctx context.Context, in *GetAllCategoryRequest, opts ...grpc.CallOption) (*GetAllCategoryResponse, error)
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error)
	GetAllBrand(ctx context.Context, in *GetAllBrandRequest, opts ...grpc.CallOption) (*GetAllBrandResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	GetAllProduct(ctx context.Context, in *GetAllProductRequest, opts ...grpc.CallOption) (*GetAllProductResponseSlice, error)
	CreateCart(ctx context.Context, in *CreateCartRequst, opts ...grpc.CallOption) (*CreateCartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	FetchCartForOrder(ctx context.Context, in *GetCartForOrderRequest, opts ...grpc.CallOption) (*GetCartForOrderResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateCatogory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCatogoryResponse, error) {
	out := new(CreateCatogoryResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateCatogory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllCategory(ctx context.Context, in *GetAllCategoryRequest, opts ...grpc.CallOption) (*GetAllCategoryResponse, error) {
	out := new(GetAllCategoryResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error) {
	out := new(CreateBrandResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllBrand(ctx context.Context, in *GetAllBrandRequest, opts ...grpc.CallOption) (*GetAllBrandResponse, error) {
	out := new(GetAllBrandResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, ProductService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllProduct(ctx context.Context, in *GetAllProductRequest, opts ...grpc.CallOption) (*GetAllProductResponseSlice, error) {
	out := new(GetAllProductResponseSlice)
	err := c.cc.Invoke(ctx, ProductService_GetAllProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCart(ctx context.Context, in *CreateCartRequst, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FetchCartForOrder(ctx context.Context, in *GetCartForOrderRequest, opts ...grpc.CallOption) (*GetCartForOrderResponse, error) {
	out := new(GetCartForOrderResponse)
	err := c.cc.Invoke(ctx, ProductService_FetchCartForOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	CreateCatogory(context.Context, *CreateCategoryRequest) (*CreateCatogoryResponse, error)
	GetAllCategory(context.Context, *GetAllCategoryRequest) (*GetAllCategoryResponse, error)
	CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error)
	GetAllBrand(context.Context, *GetAllBrandRequest) (*GetAllBrandResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	GetAllProduct(context.Context, *GetAllProductRequest) (*GetAllProductResponseSlice, error)
	CreateCart(context.Context, *CreateCartRequst) (*CreateCartResponse, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	FetchCartForOrder(context.Context, *GetCartForOrderRequest) (*GetCartForOrderResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) CreateCatogory(context.Context, *CreateCategoryRequest) (*CreateCatogoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatogory not implemented")
}
func (UnimplementedProductServiceServer) GetAllCategory(context.Context, *GetAllCategoryRequest) (*GetAllCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductServiceServer) GetAllBrand(context.Context, *GetAllBrandRequest) (*GetAllBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrand not implemented")
}
func (UnimplementedProductServiceServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductServiceServer) GetAllProduct(context.Context, *GetAllProductRequest) (*GetAllProductResponseSlice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedProductServiceServer) CreateCart(context.Context, *CreateCartRequst) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedProductServiceServer) GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedProductServiceServer) FetchCartForOrder(context.Context, *GetCartForOrderRequest) (*GetCartForOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCartForOrder not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateCatogory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCatogory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCatogory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCatogory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllCategory(ctx, req.(*GetAllCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllBrand(ctx, req.(*GetAllBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllProduct(ctx, req.(*GetAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCart(ctx, req.(*CreateCartRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FetchCartForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartForOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FetchCartForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FetchCartForOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FetchCartForOrder(ctx, req.(*GetCartForOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCatogory",
			Handler:    _ProductService_CreateCatogory_Handler,
		},
		{
			MethodName: "GetAllCategory",
			Handler:    _ProductService_GetAllCategory_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _ProductService_CreateBrand_Handler,
		},
		{
			MethodName: "GetAllBrand",
			Handler:    _ProductService_GetAllBrand_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ProductService_AddProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _ProductService_GetAllProduct_Handler,
		},
		{
			MethodName: "CreateCart",
			Handler:    _ProductService_CreateCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _ProductService_GetCart_Handler,
		},
		{
			MethodName: "FetchCartForOrder",
			Handler:    _ProductService_FetchCartForOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/product.proto",
}
